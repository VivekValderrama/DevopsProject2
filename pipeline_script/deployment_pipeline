pipeline {
    agent any

    environment {
        KUBECTL = '/usr/local/bin/kubectl'
    }

    parameters {
        string(name: 'CLUSTER_NAME', defaultValue: 'amazon-prime-cluster', description: 'Enter your EKS cluster name')
    }

    stages {
        stage("Login to EKS") {
            steps {
                script {
                    withCredentials([string(credentialsId: 'awsaccesskey', variable: 'AWS_ACCESS_KEY'),
                                     string(credentialsId: 'awssecretaccesskey', variable: 'AWS_SECRETACCESS_KEY')]) {
                        sh "aws eks --region us-east-1 update-kubeconfig --name ${params.CLUSTER_NAME}"
                    }
                }
            }
        }

        stage("Configure Prometheus & Grafana") {
            steps {
                script {
                    sh """
                    helm repo add prometheus-community https://prometheus-community.github.io/helm-charts || true
                    helm repo update
                    
                    # Check if namespace 'prometheus' exists
                    kubectl get namespace prometheus || kubectl create namespace prometheus
                    
                    # Check if the Helm release exists before upgrading
                    if helm list -n prometheus | grep kube-prometheus-stack; then
                        echo "Upgrading Prometheus..."
                        helm upgrade prometheus prometheus-community/kube-prometheus-stack -n prometheus
                    else
                        echo "Installing Prometheus..."
                        helm install prometheus prometheus-community/kube-prometheus-stack -n prometheus
                    fi
                    
                    # Patch Prometheus & Grafana services for LoadBalancer
                    kubectl patch svc prometheus-kube-prometheus-prometheus -n prometheus -p '{"spec": {"type": "LoadBalancer"}}'
                    kubectl patch svc prometheus-grafana -n prometheus -p '{"spec": {"type": "LoadBalancer"}}'
                    """
                }
            }
        }

        stage("Configure ArgoCD") {
            steps {
                script {
                    sh """
                    helm repo add argo https://argoproj.github.io/argo-helm || true
                    helm repo update
                    
                    # Check if namespace 'argocd' exists
                    kubectl get namespace argocd || kubectl create namespace argocd
                    
                    # Install ArgoCD with Helm if not already installed
                    if helm list -n argocd | grep argocd; then
                        echo "Upgrading ArgoCD..."
                        helm upgrade argocd argo/argo-cd -n argocd
                    else
                        echo "Installing ArgoCD..."
                        helm install argocd argo/argo-cd -n argocd
                    fi
                    
                    # Patch ArgoCD service for LoadBalancer
                    kubectl patch svc argocd-server -n argocd -p '{"spec": {"type": "LoadBalancer"}}'
                    """
                }
            }
        }
    }
}
